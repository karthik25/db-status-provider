{"name":"Db-Status-Provider","tagline":"A simple extension to keep track of the state of your MVC 3/4 application's database!","body":"### Introduction\r\n\r\nThis is a very simple extension that can be used to keep track of the state of your application's database. I use this method for my other \r\nopen source project sBlog.Net!\r\n\r\n### Installation\r\n\r\nTo install DbStatusProvider, run the following command in the Package Manager Console\r\n\r\n```posh\r\nPM> Install-Package DbStatusProvider\r\n```\r\n\r\nOr, see below (Usage).\r\n\r\n### Samples\r\n\r\nA sample project is located at [https://github.com/karthik25/db-status-provider](https://github.com/karthik25/db-status-provider)\r\n\r\n### Usage\r\n\r\nSelect the ASP.Net MVC project that should contain the DbStatusProvider nuget package. Right click, select \"Manage NuGet Packages...\".\r\n\r\nSelect the \"Online\" option in the left menu, enter \"DbStatusProvider\" in the search box.\r\n\r\nIn the results select \"DbStatusProvider\", click on \"Install\". Click on \"Close\".\r\n\r\nThe following changes will happen to your project.\r\n\r\n* References to \"DbStatusProvider.dll\" and \"WebActivatorEx.dll\"\r\n* DbStatusProvider.cs to App_Start folder\r\n* _DbStatus.cshtml partial view to Views\\Shared folder\r\n* The following element to web.config\r\n\r\n```xml\r\n<dbStatusUpdater contextType=\"\" scriptsBase=\"\" scriptsPrefix=\"\" />\r\n```\r\n\r\nThe first step would be to create the data context that could be used to get a list of scripts ran / add a script that was successfully ran.\r\n\r\n```csharp\r\nnamespace SampleMvcApp.Contexts\r\n{\r\n\tpublic class SchemaContext : ISchemaContext\r\n\t{\r\n\t\tpublic void Dispose()\r\n\t\t{\r\n\t\t    throw new NotImplementedException();\r\n\t\t}\r\n\r\n\t\tpublic IList<ISchemaVersion> GetScriptsInstalled()\r\n\t\t{\r\n\t\t    throw new NotImplementedException();\r\n\t\t}\r\n\r\n\t\tpublic void AddScript(ISchemaVersion schemaVersion)\r\n\t\t{\r\n\t\t    throw new NotImplementedException();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nLets now update the web.config file as shown below. I guess it's already evident what the first attribute is for. The 2nd attribute\r\nspecifies the base folder for the scripts (\"~/Sql\") and the 3rd attribute specifies the prefix of the scripts relevant to this application, \"sc\"\r\nin this case.\r\n\r\n```xml\r\n<dbStatusUpdater contextType=\"SampleMvcApp.Contexts.SchemaContext\" scriptsBase=\"~/Sql\" scriptsPrefix=\"sc\" />\r\n```\r\n\r\nThe next step would be to create the folder that would contain the schema change files. Say \"Sql\" within the root folder. Start creating the scripts\r\nin the format:\r\n\r\n```\r\nscXXYYZZ[.sql]\r\n```\r\n\r\n\"sc\" is the prefix defined in the web.config file. Here XX, YY, ZZ are 2 digit numbers following an order. A valid example would be \"sc010001.sql\", \r\nwhere XX = 01, YY = 00 and ZZ = 01. [.sql] is the extension of the and it could pretty much be anything.\r\n\r\nThat's it you are all set! When the application starts the extension is going to use the context defined and the folder to \"see\" if any scripts \r\nare pending. An application variable is created to hold the results of this operation and it could be used like this.\r\n\r\n```csharp\r\npublic class HomeController : Controller\r\n{\r\n\tpublic ActionResult Index()\r\n\t{\r\n\t    var setupStatus = App_Start.DbStatusProvider.GetStatus();\r\n\t    return View(setupStatus);\r\n\t}\r\n}\r\n```\r\n\r\nNow, you could use the partial provided to display the status, as shown below:\r\n\r\n```\r\n@model DbStatusProvider.Objects.SetupStatus\r\n\r\n@Html.Partial(\"_DbStatus\", Model)\r\n```\r\n\r\nThat's it! It's \"kind of\" functional now! But to finalize, you could extend the application further by providing a button, based on the setup status:\r\n\r\n\r\n```\r\n@model DbStatusProvider.Objects.SetupStatus\r\n\r\n@Html.Partial(\"_DbStatus\", Model)\r\n\r\n@using (Html.BeginForm(\"Submit\", \"Home\"))\r\n{\r\n\t<input type=\"submit\" value=\"Finalize\" />\r\n}\r\n```\r\n\r\nThen on \"submit\" you could run the scripts to be run and redirect them to a different page!\r\n\r\n```csharp\r\n[HttpPost]\r\npublic ActionResult Submit()\r\n{\r\n    var setupStatus = App_Start.DbStatusProvider.GetStatus();\r\n    if (setupStatus.StatusCode == SetupStatusCode.HasUpdates)\r\n    {\r\n\tvar scripts = setupStatus.FullPathsOfScripts;\r\n\t\r\n\tforeach( var script in scripts)\r\n\t{\r\n\t\t// Run the scripts\r\n\r\n\t\t// Call the data context's AddScript method to update\r\n\t}\r\n\r\n\t// Unset the application variable\r\n\tApp_Start.DbStatusProvider.ClearStatus();\t\r\n\r\n\t// You could also reset the status\r\n\t// var newStatus = App_Start.DbStatusProvider.ResetStatus();\r\n\r\n\t// Redirect\r\n    }\r\n    return View();\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}